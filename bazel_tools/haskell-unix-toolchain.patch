diff --git a/haskell/cabal.bzl b/haskell/cabal.bzl
index d1e0133e..7cba2b05 100644
--- a/haskell/cabal.bzl
+++ b/haskell/cabal.bzl
@@ -86,7 +86,8 @@ def _cabal_tool_flag(tool):
         return "--with-{}={}".format(tool.basename, tool.path)
 
 def _make_path(hs, binaries):
-    return ":".join([binary.dirname for binary in binaries.to_list()])
+    path_list_sep = ";" if hs.toolchain.is_windows else ":"
+    return path_list_sep.join([binary.dirname for binary in binaries.to_list()])
 
 def _prepare_cabal_inputs(hs, cc, dep_info, cc_info, component, package_id, tool_inputs, tool_input_manifests, cabal, setup, srcs, flags, cabal_wrapper, package_database):
     """Compute Cabal wrapper, arguments, inputs."""
diff --git a/haskell/cabal_wrapper.bzl b/haskell/cabal_wrapper.bzl
index 4e32f2ad..3433aaa4 100644
--- a/haskell/cabal_wrapper.bzl
+++ b/haskell/cabal_wrapper.bzl
@@ -32,6 +32,7 @@ def _cabal_wrapper_impl(ctx):
             "%{unix_paths}": repr(unix_toolchain.paths),
             "%{strip}": cc_toolchain.strip_executable(),
             "%{is_windows}": str(hs.toolchain.is_windows),
+            "%{workspace}": ctx.workspace_name,
         },
     )
     return [DefaultInfo(
diff --git a/haskell/private/cabal_wrapper.py.tpl b/haskell/private/cabal_wrapper.py.tpl
index 80feb4c2..8229b364 100755
--- a/haskell/private/cabal_wrapper.py.tpl
+++ b/haskell/private/cabal_wrapper.py.tpl
@@ -16,6 +16,7 @@
 
 from __future__ import print_function
 
+from bazel_tools.tools.python.runfiles import runfiles as bazel_runfiles
 from contextlib import contextmanager
 from glob import glob
 import os
@@ -26,7 +27,9 @@ import subprocess
 import sys
 import tempfile
 
-debug = False
+debug = True
+
+path_list_sep = ":" if "%{is_windows}" != "True" else ";"
 
 def run(cmd, *args, **kwargs):
     if debug:
@@ -34,10 +37,50 @@ def run(cmd, *args, **kwargs):
         sys.stderr.flush()
     subprocess.call(cmd, *args, **kwargs)
 
+def find_exe(exe):
+    if debug:
+        print("find_exe(%s)", exe, file=sys.stderr)
+    if os.path.isfile(exe):
+        path = os.path.abspath(exe)
+    else:
+        r = bazel_runfiles.Create()
+        path = r.Rlocation("/".join(["%{workspace}", exe]))
+        if not os.path.isfile(exe) and "%{is_windows}" == "True":
+            path = r.Rlocation("/".join(["%{workspace}", exe + ".exe"))
+    if debug:
+        print("  --> %s", path, file=sys.stderr)
+
+def posix_path(path):
+    """Convert the given path to POSIX format.
+
+    On Unix this is a no-op. On Windows it converts Windows style paths to
+    POSIX style. E.g. `C:\\foo\\bar` to `/c/foo/bar`.
+
+    Assumes that the given path is absolute.
+    """
+    if "%{is_windows}" != "True":
+        return path
+    else:
+        if debug:
+            print("posix_path(%s)" % path, file=sys.stderr)
+        drive, path = os.path.splitdrive(path)
+        path = path.replace("\\", "/")
+        if drive.startswith("\\\\?\\"):
+            drive = drive[len("\\\\?\\"):]
+        if len(drive) == 2 and drive[1] == ":":
+            drive_letter = drive[0].lower()
+            if not path.lower().startswith("/%s" % drive_letter):
+                path = "/%s%s" % (drive_letter, path)
+        if debug:
+            print("  --> %s" % path, file=sys.stderr)
+        return path
+
 def canonicalize_path(path):
-    return ":".join([
-        os.path.abspath(entry)
-        for entry in path.split(":")
+    if debug:
+        print("canonicalize_path(%s)" % path, file=sys.stderr)
+    return path_list_sep.join([
+        posix_path(os.path.abspath(entry))
+        for entry in path.split(path_list_sep)
         if entry != ""
     ])
 
@@ -45,26 +88,30 @@ def canonicalize_path(path):
 os.environ["LD_LIBRARY_PATH"] = canonicalize_path(os.getenv("LD_LIBRARY_PATH", ""))
 os.environ["LIBRARY_PATH"] = canonicalize_path(os.getenv("LIBRARY_PATH", ""))
 
-base_path = ":".join(%{unix_paths})
-os.environ["PATH"] = canonicalize_path(os.getenv("EXTRA_PATH", "") + ":" + base_path)
+base_path = path_list_sep.join(%{unix_paths})
+os.environ["PATH"] = canonicalize_path(os.getenv("EXTRA_PATH", "") + path_list_sep + base_path)
 
 
 component = sys.argv.pop(1)
 name = sys.argv.pop(1)
 execroot = os.getcwd()
-setup = os.path.join(execroot, sys.argv.pop(1))
+execroot_posix = posix_path(execroot)
+print("execroot: %s" % execroot, file=sys.stderr)
+print("execroot_posix: %s" % execroot_posix, file=sys.stderr)
+setup = os.path.join(execroot_posix, sys.argv.pop(1))
 srcdir = os.path.join(execroot, sys.argv.pop(1))
 # By definition (see ghc-pkg source code).
 pkgroot = os.path.realpath(os.path.join(execroot, os.path.dirname(sys.argv.pop(1))))
+pkgroot_posix = os.path.realpath(os.path.join(execroot_posix, os.path.dirname(sys.argv.pop(1))))
 libdir = os.path.join(pkgroot, "{}_iface".format(name))
 dynlibdir = os.path.join(pkgroot, "lib")
 bindir = os.path.join(pkgroot, "bin")
 datadir = os.path.join(pkgroot, "{}_data".format(name))
 package_database = os.path.join(pkgroot, "{}.conf.d".format(name))
 
-runghc = os.path.join(execroot, r"%{runghc}")
-ghc = os.path.join(execroot, r"%{ghc}")
-ghc_pkg = os.path.join(execroot, r"%{ghc_pkg}")
+runghc = find_exe(r"%{runghc}")
+ghc = find_exe(r"%{ghc}")
+ghc_pkg = find_exe(r"%{ghc_pkg}")
 
 extra_args = []
 current_arg = sys.argv.pop(1)
@@ -74,10 +121,11 @@ while current_arg != "--":
 del current_arg
 
 path_args = sys.argv[1:]
+print("path_args", path_args, file=sys.stderr)
 
-ar = os.path.realpath("%{ar}")
-cc = os.path.realpath("%{cc}")
-strip = os.path.realpath("%{strip}")
+ar = find_exe("%{ar}")
+cc = find_exe("%{cc}")
+strip = find_exe("%{strip}")
 
 def recache_db():
     run([ghc_pkg, "recache", "--package-db=" + package_database])
@@ -100,10 +148,8 @@ with tmpdir() as distdir:
     # Note, we cannot currently use it on Windows because the solution to the
     # following issue is not released, yet.
     #   https://github.com/bazelbuild/bazel/issues/9390
-    with_gcc_flags = ["--with-gcc=" + cc] \
-            if "%{is_windows}" != "True" else []
-    enable_relocatable_flags = ["--enable-relocatable"] \
-            if "%{is_windows}" != "True" else []
+    with_gcc_flags = ["--with-gcc=" + cc] if "%{is_windows}" != "True" else []
+    enable_relocatable_flags = ["--enable-relocatable"] if "%{is_windows}" != "True" else []
 
     # Cabal really wants the current working directory to be directory
     # where the .cabal file is located. So we have no choice but to chance
@@ -112,36 +158,81 @@ with tmpdir() as distdir:
     old_cwd = os.getcwd()
     os.chdir(srcdir)
     os.putenv("HOME", "/var/empty")
-    run([runghc, setup, "configure", \
-        component, \
-        "--verbose=0", \
-        "--user", \
+    print("extra_args", repr(extra_args), file=sys.stderr)
+    print("list execroot_posix", repr([ arg.replace("=", "=" + execroot_posix + "/") for arg in path_args if arg ]), file=sys.stderr)
+    print("list package_database", repr([ "--package-db=" + package_database ]), file=sys.stderr)
+    print("distdir", repr(distdir), file=sys.stderr)
+    print("runghc", repr(runghc), file=sys.stderr)
+    print("setup", repr(setup), file=sys.stderr)
+    print("component", repr(component), file=sys.stderr)
+    print("ghc", repr(ghc), file=sys.stderr)
+    print("ghc_pkg", repr(ghc_pkg), file=sys.stderr)
+    print("ar", repr(ar), file=sys.stderr)
+    print("with_gcc_flags", repr(with_gcc_flags), file=sys.stderr)
+    print("strip", repr(strip), file=sys.stderr)
+    print("enable_relocatable_flags", repr(enable_relocatable_flags), file=sys.stderr)
+    print("run", repr([runghc, setup, "configure",
+        component,
+        "--verbose=0",
+        "--user",
+        "--with-compiler=" + ghc,
+        "--with-hc-pkg=" + ghc_pkg,
+        "--with-ar=" + ar,
+        ] +
+        with_gcc_flags +
+        [
+        "--with-strip=" + strip,
+        "--enable-deterministic",
+        ] +
+        enable_relocatable_flags #+
+        #[
+        #"--builddir=" + distdir,
+        #"--prefix=" + pkgroot,
+        #"--libdir=" + libdir,
+        #"--dynlibdir=" + dynlibdir,
+        #"--libsubdir=",
+        #"--bindir=" + bindir,
+        #"--datadir=" + datadir,
+        ## Note, setting --datasubdir is required to work around
+        ##   https://github.com/haskell/cabal/issues/6235
+        #"--datasubdir=",
+        #"--package-db=clear",
+        #"--package-db=global",
+        #] +
+        #extra_args +
+        #[ arg.replace("=", "=" + execroot_posix + "/") for arg in path_args if arg ] +
+        #[ "--package-db=" + package_database ], # This arg must come last.
+        ), file=sys.stderr)
+    run([runghc, setup, "configure",
+        component,
+        "--verbose=0",
+        "--user",
         "--with-compiler=" + ghc,
         "--with-hc-pkg=" + ghc_pkg,
         "--with-ar=" + ar,
         ] +
-        with_gcc_flags + \
-        [ \
+        with_gcc_flags +
+        [
         "--with-strip=" + strip,
-        "--enable-deterministic", \
+        "--enable-deterministic",
         ] +
-        enable_relocatable_flags + \
-        [ \
-        "--builddir=" + distdir, \
-        "--prefix=" + pkgroot, \
-        "--libdir=" + libdir, \
-        "--dynlibdir=" + dynlibdir, \
-        "--libsubdir=", \
-        "--bindir=" + bindir, \
-        "--datadir=" + datadir, \
+        enable_relocatable_flags +
+        [
+        "--builddir=" + distdir,
+        "--prefix=" + pkgroot,
+        "--libdir=" + libdir,
+        "--dynlibdir=" + dynlibdir,
+        "--libsubdir=",
+        "--bindir=" + bindir,
+        "--datadir=" + datadir,
         # Note, setting --datasubdir is required to work around
         #   https://github.com/haskell/cabal/issues/6235
-        "--datasubdir=", \
-        "--package-db=clear", \
-        "--package-db=global", \
-        ] + \
-        extra_args + \
-        [ arg.replace("=", "=" + execroot + "/") for arg in path_args ] + \
+        "--datasubdir=",
+        "--package-db=clear",
+        "--package-db=global",
+        ] +
+        extra_args +
+        [ arg.replace("=", "=" + execroot_posix + "/") for arg in path_args if arg ] +
         [ "--package-db=" + package_database ], # This arg must come last.
         )
     run([runghc, setup, "build", "--verbose=0", "--builddir=" + distdir])
@@ -169,7 +260,7 @@ def make_relocatable_paths(line):
 
     # The $execroot is an absolute path and should not leak into the output.
     # Replace each ocurrence of execroot by a path relative to ${pkgroot}.
-    line = re.sub(execroot + '\S*', make_relative_to_pkgroot, line)
+    line = re.sub(re.escape(execroot_posix) + '\S*', make_relative_to_pkgroot, line)
     return line
 
 if libraries != [] and os.path.isfile(package_conf_file):
diff --git a/haskell/private/unix/unix_configure.bzl b/haskell/private/unix/unix_configure.bzl
index 112d74e7..87221143 100644
--- a/haskell/private/unix/unix_configure.bzl
+++ b/haskell/private/unix/unix_configure.bzl
@@ -43,7 +43,10 @@ toolchain(
             for (cmd, cmd_path) in commands.items()
             if cmd_path
         ]),
-        os = "osx" if cpu == "darwin" else "linux",
+        os = {
+            "darwin": "osx",
+            "x64_windows": "windows",
+        }.get(cpu, "linux"),
     ))
 
 unix_config = repository_rule(
