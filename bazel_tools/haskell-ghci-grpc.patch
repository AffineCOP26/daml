diff --git a/haskell/private/path_utils.bzl b/haskell/private/path_utils.bzl
index d2ba25d4..89d1b52b 100644
--- a/haskell/private/path_utils.bzl
+++ b/haskell/private/path_utils.bzl
@@ -127,6 +127,44 @@ def make_path(libs, prefix = None, sep = None):
 
     return sep.join(set.to_list(r))
 
+def symlink_dynamic_library(hs, lib, outdir):
+    """Create a symbolic link for a dynamic library and fix the extension.
+
+    This function is used for two reasons:
+
+    1) GHCi expects specific file endings for dynamic libraries depending on
+       the platform: (Linux: .so, macOS: .dylib, Windows: .dll). Bazel does not
+       follow this convention.
+
+    2) macOS applies a strict limit to the MACH-O header size. Many large
+       dynamic loading commands can quickly exceed this limit. To avoid this we
+       place all dynamic libraries into one directory, so that a single RPATH
+       entry is sufficient.
+
+    Args:
+      hs: Haskell context.
+      lib: The dynamic library file.
+      outdir: Output directory for the symbolic link.
+
+    Returns:
+      File, symbolic link to dynamic library.
+    """
+    if hs.toolchain.is_darwin:
+        extension = "dylib"
+    elif hs.toolchain.is_windows:
+        extension = "dll"
+    else:
+        # On Linux we must preserve endings like .so.1.2.3. If those exist then
+        # there will be a matching .so symlink that points to the final
+        # library.
+        extension = get_lib_extension(lib)
+
+    link = hs.actions.declare_file(
+        paths.join(outdir, "lib" + get_lib_name(lib) + "." + extension),
+    )
+    ln(hs, lib, link)
+    return link
+
 def mangle_static_library(hs, dynamic_lib, static_lib, outdir):
     """Mangle a static library to match a dynamic library name.
 
diff --git a/haskell/providers.bzl b/haskell/providers.bzl
index 53246c6d..a958fd48 100644
--- a/haskell/providers.bzl
+++ b/haskell/providers.bzl
@@ -13,6 +13,7 @@ load(
     "make_path",
     "mangle_static_library",
     "rel_to_pkgroot",
+    "symlink_dynamic_library",
     "target_unique_name",
 )
 
@@ -275,6 +276,10 @@ def get_extra_libs(hs, cc_info, dynamic = False, pic = None, fixup_dir = "_libs"
 
         static_lib = mangle_static_library(hs, dynamic_lib, static_lib, fixed_lib_dir)
 
+        if hs.toolchain.is_darwin and fixup_dir == "_ghci_libs" and dynamic_lib and get_lib_name(dynamic_lib) == "grpc":
+            dynamic_libs.append(symlink_dynamic_library(hs, dynamic_lib, fixup_dir))
+            continue
+
         if static_lib and not (dynamic and dynamic_lib):
             static_libs.append(static_lib)
         elif dynamic_lib:
